//==============================================================================
// tOVL_Trim.cpp (User function)
// 
//    void tOVL_Trim_user_init(test_function& func)
//    void tOVL_Trim(test_function& func)
//
//==============================================================================

#include "asl.h"
// Disable warning C4244 "conversion from 'const double' to 'float', possible loss of data"
#pragma warning (disable : 4244)

#include "tOVL_Trim.h"

// !!!! User #includes and externs can be placed between the comments
// !!!!

// *************************************************************************

void tOVL_Trim_user_init(test_function& func)
{
	tOVL_Trim_params *ours;
    ours = (tOVL_Trim_params *)func.params;

// !!!! User initialization code below this comment (do not remove comment)

// !!!! User initialization code above this comment (do not remove comment)
}

// *************************************************************************

void tOVL_Trim(test_function& func)
{
    // The two lines below must be the first two in the function.
    tOVL_Trim_params *ours;
    ours = (tOVL_Trim_params *)func.params;

	// Increment function number //
	gFuncNum++;

	////// Datalog gFuncNum variable //
	////if(gDisplay_FuncNum)
	////	PiDatalog(func, A_Func_Num_tOVL_Trim, gFuncNum, 14,	POWER_UNIT);

	//////Skip Test if AbortTest set 
	////if (AbortTest)
	////	return;

	////// Skip trimming if g_Trim_Enable_P set //
	////if (g_Trim_Enable_P == 0)
	////	return;

	////if (g_Fn_tOVL_Trim == 0 )  return;

	////// Test Time Begin //
	//// if (g_TstTime_Enble_P)
	//// 	g_begintime = g_mytimer.GetElapsedTime();

	////// Declare Variables //
	////float IZtr_tOVL1 =0.0;
	////float IZtr_tOVL2 =0.0;
	////float IZtr_tOVLsign =0.0;
	////float trim_weight[16] ={0}; // Double of what's needed
	////float trim_target =0.0;
	////float trim_exp =0.0;
	////float trim_needed =0.0; 
	////float trim_result =0.0;
	////float delta;
	////int trim_code =0; 
	////int plot_code;
	////int Force_Trim =0;
	////int previous_addr; 
	////int trim_addr;
	////int clks;
	////int i;
	////float tOVL_Trim_TT = 0;
	////Pulse pulse;

	////// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
	//////  Table for tOVL_needed = -1*[(Pre/Target)-1]*100%					//
	////// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ //
	////							// L3, L2, L1		Trim Code	Plot Code
	////trim_weight[0] = 0.0;		// Code: 000			0			  0
	////trim_weight[1] = -4.0;		// Code: 001			1			 -1	 
	////trim_weight[2] = -8.0;		// Code: 010			2			 -2
	////trim_weight[3] = -12;		// Code: 011			3			 -3   
	////trim_weight[4] = 4.0;		// Code: 100			4			  1
	////trim_weight[5] = 8.0;		// Code: 101			5			  2
	////trim_weight[6] = 12.0;		// Code: 110			6			  3
	////trim_weight[7] = 16.0;		// Code: 111			7			  4

	////trim_target = g_tOVL_TARGET_Trimops;

	////if(g_tOVL_Pt !=0 && g_tOVL_Pt < 15e-6)
	////	trim_needed = -100.0 * ((g_tOVL_Pt / trim_target) -1);	
	////else
	////	trim_needed = 999.0;

	////// Determine Trim Code //
	////trim_code = 0;
	////delta = 9.99e6; 

	////// Auto Trim Code
	////for(i =0; i<8 ;i++) // i< 2^(#of bits)
	////{
	////	trim_result =  g_tOVL_Pt*(trim_weight[i]/100.0 +1);
	////	if(fabs(trim_result - trim_target) < delta)
	////	{
	////		trim_code = i;
	////		delta = fabs(trim_result - trim_target);
	////	}
	////}

	////// Trim Anti-fuses //
	////Powerup_to_trim_primary();

	////previous_addr =0;
	////trim_addr     =0;

	////if(trim_code & 1) // L1 
	////{
	////	trim_addr = gP_AF_Start_Addr_tOVL;		
	////	clks = trim_addr - previous_addr;
	////	DDD_Clock_UV_Antifuse(clks);
	////	Trim_Anti_fuse_primary(&IZtr_tOVL1);
	////	previous_addr =  trim_addr;

	////	// Save required trimmed bits to Antifuse array, for checking later in Iz_xChk_TrmCode_P.cpp function. //
	////	g_xChk_P[10] = 1;

	////	// Datalog
	////	PiDatalog(func, A_IZtr_tOVL1, IZtr_tOVL1, 14, POWER_MILLI);	

	////}
	////if(trim_code & 2) // L2
	////{
	////	trim_addr = gP_AF_Start_Addr_tOVL + 1;
	////	clks = trim_addr - previous_addr;
	////	DDD_Clock_UV_Antifuse(clks);
	////	Trim_Anti_fuse_primary(&IZtr_tOVL2);
	////	previous_addr =  trim_addr;

	////	// Save required trimmed bits to Antifuse array, for checking later in Iz_xChk_TrmCode_P.cpp function. //
	////	g_xChk_P[11] = 1;

	////	// Datalog
	////	PiDatalog(func, A_IZtr_tOVL2, IZtr_tOVL2, 14, POWER_MILLI);	
	////}
	////if(trim_code & 4) // L3
	////{
	////	trim_addr = gP_AF_Start_Addr_tOVL + 2;
	////	clks = trim_addr - previous_addr;
	////	DDD_Clock_UV_Antifuse(clks);
	////	Trim_Anti_fuse_primary(&IZtr_tOVLsign);
	////	previous_addr =  trim_addr;

	////	// Save required trimmed bits to Antifuse array, for checking later in Iz_xChk_TrmCode_P.cpp function. //
	////	g_xChk_P[12] = 1;

	////	// Datalog
	////	PiDatalog(func, A_IZtr_tOVLsign, IZtr_tOVLsign, 14, POWER_MILLI);	
	////}
	////if(trim_code >= 4)
	////	plot_code = (trim_code -3);
	////else 
	////	plot_code = -trim_code;

	////g_tOVL_exp = trim_weight[trim_code]; // Save value for post-trim change calculation 

	////// Powerdown //
	////Powerdown_from_trim_primary();

	//////Datalog
	////PiDatalog(func, A_gtOVL_TARGET,trim_target, 14, POWER_MICRO);	
	////PiDatalog(func, A_tOVL_code, plot_code, 14,	POWER_UNIT);	
	////PiDatalog(func, A_tOVL_table, trim_weight[trim_code], 14, POWER_UNIT);	
	////PiDatalog(func, A_tOVL_needed,trim_needed, 14, POWER_UNIT);	
	////
	////// Test Time End //
	////if (g_TstTime_Enble_P)
	////{
	////	g_endtime = g_mytimer.GetElapsedTime();
	////	tOVL_Trim_TT = (g_endtime - g_begintime)*1e-6;
	////	PiDatalog(func, A_tOVL_Trim_TT, tOVL_Trim_TT, 14, POWER_MILLI);
	////}

	////// Check any test failed //
	////if (PiGetAnyFailStatus())		
	////{
	////	g_PartFailed = 1;
	////}
}
